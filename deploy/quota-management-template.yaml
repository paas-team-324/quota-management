apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: quota-management
  annotations:
    description: "OpenShift application for easy management of resources for projects located across multiple clusters."
objects:
- apiVersion: user.openshift.io/v1
  kind: Group
  metadata:
    name: ${QUOTA_MANAGERS_GROUP}
  users: []
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: quota-scheme
    namespace: ${NAMESPACE}
  data:
    scheme.json: |
      {
          "compute": {
              "pods": {
                  "name": "Pods",
                  "units": "",
                  "type": "int"
              },
              "requests.cpu": {
                  "name": "CPU Cores",
                  "units": "",
                  "type": "float"
              },
              "requests.memory": {
                  "name": "Memory",
                  "units": [ "Gi", "Mi" ],
                  "type": "float"
              }
          },
          "storage": {
              "requests.storage": {
                  "name": "Storage",
                  "units": "Gi",
                  "type": "float"
              },
              "persistentvolumeclaims": {
                  "name": "Persistent Volume Claims",
                  "units": "",
                  "type": "int"
              }
          }
      }
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: ca-bundle
    namespace: ${NAMESPACE}
  data:
    ca-bundle.pem: |
- apiVersion: v1
  kind: Secret
  metadata:
    name: clusters
    namespace: ${NAMESPACE}
  stringData:
    local: |
        {
            "displayName": "Local cluster",
            "api": "https://openshift.default.svc:443",
            "production": false,
            "token": ""
        }
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    annotations:
      serviceaccounts.openshift.io/oauth-redirectreference.client: "{\"kind\":\"OAuthRedirectReference\",\"apiVersion\":\"v1\",\"reference\":{\"kind\":\"Route\",\"name\":\"quota-management\"}}"
    name: quota-management
    namespace: ${NAMESPACE}
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    name: quota-management
  rules:
  - apiGroups:
    - authentication.k8s.io
    resources:
    - tokenreviews
    verbs:
    - create
  - apiGroups:
    - user.openshift.io
    resources:
    - groups
    resourceNames:
    - ${QUOTA_MANAGERS_GROUP}
    verbs:
    - get
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    name: quota-management
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: quota-management
  subjects:
  - kind: ServiceAccount
    name: quota-management
    namespace: ${NAMESPACE}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: quota-management
    namespace: ${NAMESPACE}
    labels:
      app: quota-management
  spec:
    replicas: 2
    selector:
      matchLabels:
        app: quota-management
    template:
      metadata:
        labels:
          app: quota-management
      spec:
        serviceAccountName: quota-management
        containers:
        - name: quota-management
          image: ${IMAGE}
          ports:
          - containerPort: 5000
          resources:
            requests:
              memory: "64Mi"
              cpu: ".1"
          livenessProbe:
            httpGet:
              path: /healthz
              port: 5000
          env:
          - name: QUOTA_SCHEME_FILE
            value: "/app/scheme.json"
          - name: CLUSTERS_DIR
            value: "/app/clusters"
          - name: QUOTA_MANAGERS_GROUP
            value: "${QUOTA_MANAGERS_GROUP}"
          - name: INSECURE_REQUESTS
            value: "${INSECURE_REQUESTS}"
          - name: SERVICEACCOUNT_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.serviceAccountName
          - name: SERVICEACCOUNT_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          volumeMounts:
          - name: scheme
            mountPath: "/app/scheme.json"
            subPath: "scheme.json"
            readOnly: true
          - name: ca-bundle
            mountPath: "/usr/local/share/ca-certificates/extra/ca-bundle.pem"
            subPath: "ca-bundle.pem"
            readOnly: true
          - name: clusters
            mountPath: "/app/clusters"
            readOnly: true
          imagePullPolicy: "${PULL_POLICY}"
        volumes:
        - name: scheme
          configMap:
            name: quota-scheme
        - name: ca-bundle
          configMap:
            name: ca-bundle
        - name: clusters
          secret:
            secretName: clusters
- apiVersion: v1
  kind: Service
  metadata:
    name: quota-management
    namespace: ${NAMESPACE}
  spec:
    selector:
      app: quota-management
    ports:
      - protocol: TCP
        port: 5000
        targetPort: 5000
- kind: Route
  apiVersion: route.openshift.io/v1
  metadata:
    name: quota-management
    namespace: ${NAMESPACE}
  spec:
    to:
      kind: Service
      name: quota-management
      weight: 100
    port:
      targetPort: 5000
    tls:
      termination: edge
      insecureEdgeTerminationPolicy: Redirect
    wildcardPolicy: None
parameters:
- description: Namespace in which to deploy the quota management
  name: NAMESPACE
  value: "quota-management"
  required: true
- description: Name for the quota managers group
  value: quota-managers
  name: QUOTA_MANAGERS_GROUP
  required: true
- description: Docker image to use
  value: docker.io/vladpbr/quota-management:1.3
  name: IMAGE
  required: true
- description: Pull policy for the image
  value: IfNotPresent
  name: PULL_POLICY
  required: true
- description: Should the server verify remote cluster certificates
  value: "False"
  name: INSECURE_REQUESTS
  required: true
